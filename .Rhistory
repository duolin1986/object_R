for (i in .){
print(i)
bb <- data_frame(value=(test$f_handled_data[[i]]),name=i,group='a')
f_reconstruct <- rbind(bb,f_reconstruct)
}
return(f_reconstruct)
}
test$f_handled_data %>% colnames() %>% grep(x=,pattern = '.*signal$',value = T) %>% return()
test$f_handled_data %>% colnames() %>% grep(x=,pattern = '.*signal$',value = T) %>% return(x)
test$f_handled_data %>% colnames() %>% grep(x=,pattern = '.*signal$',value = T) %>% return(x=)
test$f_handled_data %>% colnames() %>% grep(x=,pattern = '.*signal$',value = T) %>% return()
test$f_handled_data %>% colnames() %>% grep(x=,pattern = '.*signal$',value = T) %>% print()
View(a)
b <- test$f_handled_data
test$f_handled_data %<>% colnames() %>% grep(x=,pattern = '.*signal$',value = T)
test$f_handled_data
test$f_handled_data %>% colnames() %>% grep(x=,pattern = '.*signal$',value = T)
test$f_handled_data <- b
test$f_handled_data %>% colnames() %>% grep(x=,pattern = '.*signal$',value = T)
test$f_handled_data %>% colnames() %>% grep(x=,pattern = '.*signal$',value = T) %>% { #将结果赋值给代码块
f_reconstruct <- NULL
for (i in .){
print(i)
bb <- data_frame(value=(test$f_handled_data[[i]]),name=i,group='a')
f_reconstruct <<- rbind(bb,f_reconstruct)
}
}
dim(f_reconstruct)
test$f_handled_data %>% colnames() %>% grep(x=,pattern = '.*signal$',value = T) %>% { #将结果赋值给代码块
f_reconstruct <- NULL
for (i in .){
print(i)
bb <- data_frame(value=(test$f_handled_data[[i]]),name=i,group='a')
f_reconstruct <- rbind(bb,f_reconstruct)
}
f_reconstruct <<-f_reconstruct
}
dim(f_reconstruct)
?magrittr
test$f_handled_data %>% colnames() %>% grep(x=,pattern = '.*signal$',value = T)=aaa
test$f_handled_data %>% colnames() %>% grep(x=,pattern = '.*signal$',value = T)->aaa
aaa
rm(a)
rm(b)
rm(f_reconstruct)
rm(data1)
aa
aaa
View(RNA)
View(God)
formals(RNA[["self"]][["public_methods"]][["clone"]])
body(RNA[["self"]][["public_methods"]][["clone"]])
environment(RNA[["self"]][["public_methods"]][["clone"]])
God[["public_methods"]][["create_zhenzhongtuijian_report_dir"]]
God[["public_methods"]][["tidy_data"]]()
God[["public_methods"]][["tidy_data"]](data = a)
God[["public_methods"]][["tidy_data"]](data = 'a')
God[["public_fields"]][["f_handled_data"]]
God[["public_fields"]][["f_handled_data"]] <- 'a'
God[["public_fields"]][["f_handled_data"]]
God[["public_fields"]][["f_handled_data"]]
tail
methods(tail)
tail.matrix
tail.data.frame
tail.data.frame*
)\
tail.matrix()
tail.matrix
install.packages('parall')
install.packages('parallel')
plot(cars)
knit_with_parameters('E:/duolin_work_dictionary/temporary_folder/23.Rmd', encoding = 'UTF-8')
test$f_handled_data %>% colnames() %>% grep(x=,pattern = '.*signal$',value = T)
c_extract_samplename <- test$f_handled_data %>% colnames() %>% grep(x=,pattern = '.*signal$',value = T)
c_extract_samplename
f_reconstruct <- NULL
for (i in c_extract_samplename){
print(i)
bb <- data_frame(value=(test$f_handled_data[[i]]),name=i,group='a')
f_reconstruct <- rbind(bb,f_reconstruct)
}
View(f_reconstruct)
View(f_name_data)
has_element(f_name_data)
has_name(f_name_data)
has_name(x = f_name_data,name = 'Chip_ID')
has_name(x = f_name_data,name = c('Chip_ID','Sample_ID'))
has_name(x = f_name_data,name = c('Chip_ID','Sample_ID'),'Group_Name')
has_name(x = f_name_data,name = c('Chip_ID','Sample_ID','Group_Name'))
all(has_name(x = f_name_data,name = c('Chip_ID','Sample_ID','Group_Name')))
stopifnot(all(has_name(x = f_name_data,name = c('Chip_ID','Sample_ID','Group_Name'))))
stopifnot(all(has_name(x = f_name_data,name = c('Chip_ID','Sample_ID','Group_Name1'))))
stopifnot(all(has_name(x = f_name_data,name = c('Chip_ID','Sample_ID','Group_Name1'))),exprs = {'wangduolin'})
stopifnot(all(has_name(x = f_name_data,name = c('Chip_ID','Sample_ID','Group_Name1'))),exprs = print('wangduolin'))
?stopifnot
stopifnot(exprs = all(has_name(x = f_name_data,name = c('Chip_ID','Sample_ID','Group_Name1'))))
stopifnot(exprs = all(has_name(x = f_name_data,name = c('Chip_ID','Sample_ID','Group_Name'))))
stopifnot(exprs = all(has_name(x = f_name_data,name = c('Chip_ID','Sample_ID','Group_Name'))),stop('wangduolin'))
library(assertthat)
assertWarning(exprs = all(has_name(x = f_name_data,name = c('Chip_ID','Sample_ID','Group_Name'))),stop('wangduolin'))
assertWarning
assertthat::assertWarning(exprs = all(has_name(x = f_name_data,name = c('Chip_ID','Sample_ID','Group_Name'))),stop('wangduolin'))
assert_that(... = all(has_name(x = f_name_data,name = c('Chip_ID','Sample_ID','Group_Name'))),stop('wangduolin'))
assert_that( all(has_name(x = f_name_data,name = c('Chip_ID','Sample_ID','Group_Name'))),stop('wangduolin'))
assert_that( all(has_name(x = f_name_data,name = c('Chip_ID','Sample_ID','Group_Name')))
)
assert_that( all((x = f_name_data,name = c('Chip_ID','Sample_ID','Group_Name'))))
assert_that( all(x = f_name_data,name = c('Chip_ID','Sample_ID','Group_Name')))
is.data.frame(iris,f_name_data)
is.data.frame(c(iris,f_name_data))
class(f_name_data)
is.data.frame(f_name_data)
is.data.frame(iris)
f_unname_data%>%colnames()
f_unname_data%>%is.data.frame()
f_name_data%T>%is.data.frame%>%has_name(, which = 'Chip_ID')
f_name_data%>%has_name(x = , which = 'Chip_ID')
f_name_data%T>%is.data.frame()%>%has_name(, which = 'Chip_ID')
f_name_data%>%has_name(, which = 'Chip_ID')
f_name_data %>% has_name(, which = 'Chip_ID')
f_name_data %>% has_name(, which = 'Chip_ID')
has_name(f_name_data,which = 'Chip_ID')
f_name_data %>% has_name(which = 'Chip_ID')
f_name_data %>% has_name(,which = 'Chip_ID')
f_name_data %>% has_name(,which = 'Chip_ID')
f_name_data %>% has_name(x=,which = 'Chip_ID')
f_name_data%T>%is.data.frame()%>%has_name(x = ,which = 'Chip_ID')
is.data.frame(f_name_data\)
is.data.frame(f_name_data\
is.data.frame(f_name_data/
,which='Chip_ID')
has_name(f_name_data,which = c('Chip_ID',"Sample_ID"))
f_unhandled_data%>%{
stopifnot(all(is.data.frame(.),
all(has_name(x = .,which = c('Fold Change')))))
}
f_name_data%>%{
stopifnot(all(is.data.frame(.),
all(has_name(x=.,which=c('Chip_ID','Sample_ID','Group_Name')))))
}
f_name_data%>%{
stopifnot(all(is.data.frame(.),
all(has_name(x=.,which=c('Chip_ID1','Sample_ID','Group_Name')))))
}
View(InG_vs_WT_infilter)
InG_vs_WT_infilter%>%{
stopifnot(all(is.data.frame(.),
all(has_name(x = .,which = c('Fold Change','P-val','FDR P-val','Gene Symbol')))))
}
?str_replace
colnames(f_unname_data)
f_unhandled_data <- InG_vs_WT_infilter
colnames(f_unhandled_data) %<>% str_replace(string =,pattern = ' ',replacement = '_' )
colnames(f_unhandled_data)
colnames(f_unhandled_data) %<>% str_replace(string =,pattern = '.',replacement = '_' )
warnings()
colnames(f_unhandled_data)
f_unhandled_data <- InG_vs_WT_infilter
head(f_unhandled_data)
colnames(f_unhandled_data) %<>% str_replace(string =,pattern = ' *',replacement = '_' )
colnames(f_unhandled_data)
colnames(InG_vs_WT_infilter)
f_unhandled_data <- InG_vs_WT_infilter
colnames(f_unhandled_data)
colnames(f_unhandled_data) %<>% str_replace(string =,pattern = ' ?',replacement = '_' )
colnames(f_unhandled_data)
f_unhandled_data <- InG_vs_WT_infilter
colnames(f_unhandled_data) %<>% str_replace(string =,pattern = ' +',replacement = '_' )
colnames(f_unhandled_data)
colnames(f_unhandled_data) %<>% str_replace(string =,pattern = '\\.+',replacement = '_' )
colnames(f_unhandled_data)
View(f_unhandled_data)
?str_replace_all
f_unhandled_data <- InG_vs_WT_infilter
colnames(f_unhandled_data) %<>% str_replace_all(string =,pattern = ' +',replacement = '_' )
colnames(f_unhandled_data)
colnames(f_unhandled_data) %<>% str_replace_all(string =,pattern = '\\.+',replacement = '_' )
colnames(f_unhandled_data)
colnames(f_unhandled_data) %<>% str_replace_all(string =,pattern = '-+',replacement = '_' )
colnames(f_unhandled_data)
warnings()
View(f_unhandled_data)
f_unhandled_data%>%{
stopifnot(all(is.data.frame(.),
all(has_name(x = .,which = c('Fold_Change','P_val','FDR_P_val','Gene_Symbol')))))
}
warnings()
f_unhandled_data%>%{
stopifnot(all(is.data.frame(.),
all(has_name(x = .,which = c('Fold_Change','P_val','FDR_P_val','Gene_Symbol')))))
}
f_unhandled_data%>%{
stopifnot(all(is.data.frame(.),
all(has_name(x = .,which = c('Fold_Change','P_val','FDR_P_val','Gene_Symbol')))))
}
warnings()
f_name_data%>%{
stopifnot(all(is.data.frame(.),
all(has_name(x=.,which=c('Chip_ID','Sample_ID','Group_Name')))))
}
f_unhandled_data%>%{
stopifnot(all(is.data.frame(.),
all(has_name(x = .,which = c('Fold_Change','P_val','FDR_P_val','Gene_Symbol')))))
}
colnames(f_unhandled_data) %<>% str_replace_all(string =,pattern = '-+',replacement = '_' )
stopifnot(all(is.data.frame(.),
all(has_name(x = .,which = c('Fold_Change','P_val','FDR_P_val','Gene_Symbol')))))
}
f_unhandled_data%>%{
stopifnot(all(is.data.frame(.),
all(has_name(x = .,which = c('Fold_Change','P_val','FDR_P_val','Gene_Symbol')))))
}
f_unhandled_data%>%{
stopifnot(all(is.data.frame(.),
all(has_name(x = .,which = c('Fold_Change1','P_val','FDR_P_val','Gene_Symbol')))))
}
log2(0)
log2(1)
2**0
2**-1
2**-3
sapply(c(1,2,3), function(x) {
x+1
})
sys.call('ls')
system.time()
Sys.time()
system.time(expr = sapply(c(1,2,3),  function(x) {
x+1
}))
system.time(expr = function(x){
for(i in c(1,2,3)){x+1}}
)
system.time(for(j in 1:length(f_unhandled_data$`Fold_Change`)){
#若 Fold_Change为正值，则直接取log2值
if(f_unhandled_data$`Fold_Change`[j]>=0){
f_unhandled_data[f_unhandled_data$`Fold_Change`[j],'log2(Fold_Change)'] <- log2(f_unhandled_data$`Fold_Change`[j])
}
#若 Fold_Change为负值，则需取负倒数后才可取log2值
else if(f_unhandled_data$`Fold_Change`[j]<0){
f_unhandled_data[f_unhandled_data$`Fold_Change`[j],'log2(Fold_Change)'] <- log2(-1/f_unhandled_data$`Fold_Change`[j])
})
f_unhandled_data$Fold_Change
system.time(for(j in 1:length(f_unhandled_data$`Fold_Change`)){
#若 Fold_Change为正值，则直接取log2值
if(f_unhandled_data$`Fold_Change`[j]>=0){
f_unhandled_data[f_unhandled_data$`Fold_Change`[j],'log2(Fold_Change)'] <- log2(f_unhandled_data$`Fold_Change`[j])
}
#若 Fold_Change为负值，则需取负倒数后才可取log2值
else if(f_unhandled_data$`Fold_Change`[j]<0){
f_unhandled_data[f_unhandled_data$`Fold_Change`[j],'log2(Fold_Change)'] <- log2(-1/f_unhandled_data$`Fold_Change`[j])
}
})
?system.time
system.time(for(j in 1:length(f_unhandled_data$`Fold_Change`)){
#若 Fold_Change为正值，则直接取log2值
if(f_unhandled_data$`Fold_Change`[j]>=0){
f_unhandled_data[f_unhandled_data$`Fold_Change`[j],'log2(Fold_Change)'] <- log2(f_unhandled_data$`Fold_Change`[j])
}
#若 Fold_Change为负值，则需取负倒数后才可取log2值
else if(f_unhandled_data$`Fold_Change`[j]<0){
f_unhandled_data[f_unhandled_data$`Fold_Change`[j],'log2(Fold_Change)'] <- log2(-1/f_unhandled_data$`Fold_Change`[j])
}
})
19.59+0.28
system.time(for(j in 1:length(f_unhandled_data$`Fold_Change`)){
#若 Fold_Change为正值，则直接取log2值
if(f_unhandled_data$`Fold_Change`[j]>=0){
f_unhandled_data[f_unhandled_data$`Fold_Change`[j],'log2(Fold_Change)'] <- log2(f_unhandled_data$`Fold_Change`[j])
}
#若 Fold_Change为负值，则需取负倒数后才可取log2值
else if(f_unhandled_data$`Fold_Change`[j]<0){
f_unhandled_data[f_unhandled_data$`Fold_Change`[j],'log2(Fold_Change)'] <- log2(-1/f_unhandled_data$`Fold_Change`[j])
}
})
system.time(message('The Handing need some time,please wait patiently')for(j in 1:length(f_unhandled_data$`Fold_Change`)){
#若 Fold_Change为正值，则直接取log2值
if(f_unhandled_data$`Fold_Change`[j]>=0){
f_unhandled_data[f_unhandled_data$`Fold_Change`[j],'log2(Fold_Change)'] <- log2(f_unhandled_data$`Fold_Change`[j])
}
#若 Fold_Change为负值，则需取负倒数后才可取log2值
else if(f_unhandled_data$`Fold_Change`[j]<0){
f_unhandled_data[f_unhandled_data$`Fold_Change`[j],'log2(Fold_Change)'] <- log2(-1/f_unhandled_data$`Fold_Change`[j])
}
})
system.time(message('The Handing need some time,please wait patiently')
for(j in 1:length(f_unhandled_data$`Fold_Change`)){
#若 Fold_Change为正值，则直接取log2值
if(f_unhandled_data$`Fold_Change`[j]>=0){
f_unhandled_data[f_unhandled_data$`Fold_Change`[j],'log2(Fold_Change)'] <- log2(f_unhandled_data$`Fold_Change`[j])
}
#若 Fold_Change为负值，则需取负倒数后才可取log2值
else if(f_unhandled_data$`Fold_Change`[j]<0){
f_unhandled_data[f_unhandled_data$`Fold_Change`[j],'log2(Fold_Change)'] <- log2(-1/f_unhandled_data$`Fold_Change`[j])
}
})
message('The Handing need some time,please wait patiently')
system.time(message('The Handing need some times,please wait patiently'))
f_unhandled_data <- InG_vs_WT_infilter
colnames(f_unhandled_data) %<>% str_replace_all(string =,pattern = ' +',replacement = '_' )
colnames(f_unhandled_data) %<>% str_replace_all(string =,pattern = '\\.+',replacement = '_' )
colnames(f_unhandled_data) %<>% str_replace_all(string =,pattern = '-+',replacement = '_' )
colnames(f_unhandled_data)
sapply(X = f_unhandled_data$`Fold_Change`,FUN = function(x){})
sapply(f_unhandled_data$`Fold_Change`, function(x){
if(f_unhandled_data$`Fold_Change`>=0){log2(x)}
else if(f_unhandled_data$Fold_Change<0){log2(-1/x)}
})
system.time(a1 <- sapply(f_unhandled_data$`Fold_Change`, function(x){
if(f_unhandled_data$`Fold_Change`>=0){log2(x)}
else if(f_unhandled_data$Fold_Change<0){log2(-1/x)}
}))
system.time(for(j in 1:length(f_unhandled_data$`Fold_Change`)){
#若 Fold_Change为正值，则直接取log2值
if(f_unhandled_data$`Fold_Change`[j]>=0){
f_unhandled_data[f_unhandled_data$`Fold_Change`[j],'log2(Fold_Change)'] <- log2(f_unhandled_data$`Fold_Change`[j])
}
#若 Fold_Change为负值，则需取负倒数后才可取log2值
else if(f_unhandled_data$`Fold_Change`[j]<0){
f_unhandled_data[f_unhandled_data$`Fold_Change`[j],'log2(Fold_Change)'] <- log2(-1/f_unhandled_data$`Fold_Change`[j])
}
})
?apply
head(a1)
View(a1)
-1/10
-1/20
-1\20
-1/10
-1//10
View(f_unhandled_data)
?sapply
a1
class(a1[1])
class(a1[2])
class(a1[3])
a1[3]
system.time(a1 <- sapply(f_unhandled_data$`Fold_Change`, function(x){
if(f_unhandled_data$`Fold_Change`>=0){log2(x)}
else if(f_unhandled_data$Fold_Change<0){log2(-1/x)}
}))
log2(5.350859)
system.time(a1 <- sapply(f_unhandled_data$Fold_Change, function(x){
if(x>=0){log2(x)}
else if(x<0){log2(-1/x)}
}))
View(a1)
22/0.04
system.time(aaaa <- function() {
a1 <- sapply(f_unhandled_data$`Fold_Change`, function(x){
if(f_unhandled_data$`Fold_Change`>=0){log2(x)}
else if(f_unhandled_data$Fold_Change<0){log2(-1/x)}
})
f_unhandled_data[,'test'] <- a1
})
aaaa
system.time( function() {
a1 <- sapply(f_unhandled_data$`Fold_Change`, function(x){
if(f_unhandled_data$`Fold_Change`>=0){log2(x)}
else if(f_unhandled_data$Fold_Change<0){log2(-1/x)}
})
f_unhandled_data[,'test'] <- a1
})
aaaa <- function() {
a1 <- sapply(f_unhandled_data$`Fold_Change`, function(x){
if(f_unhandled_data$`Fold_Change`>=0){log2(x)}
else if(f_unhandled_data$Fold_Change<0){log2(-1/x)}
})
f_unhandled_data[,'test'] <- a1
}
system.time(aaaa)
system.time(aaaa())
warnings()
source('~/.active-rstudio-document')
system.time(aaaa())
22/0.08
system.time(f_unhandled_data[f_unhandled_data$`Fold_Change`>=0,'UP_DOWN']<-'UP')
aaaa
system.time(f_unhandled_data %>% sapply(X = ,FUN = function(x){
if(x>=0){log2(x)}
else if(x<0){log2(-1/x)}
}) %>% f_unhandled_data[,'test'])
system.time(f_unhandled_data %>% sapply(X = ,FUN = function(x){
if(x>=0){log2(x)}
else if(x<0){log2(-1/x)}
})
)
system.time(f_unhandled_data$Fold_Change %>% sapply(X = ,FUN = function(x){
if(x>=0){log2(x)}
else if(x<0){log2(-1/x)}
}) %>% f_unhandled_data[,'test'])
system.time(f_unhandled_data$Fold_Change %>% sapply(X = ,FUN = function(x){
if(x>=0){log2(x)}
else if(x<0){log2(-1/x)}
}))
system.time(f_unhandled_data$Fold_Change %>% sapply(X = ,FUN = function(x){
if(x>=0){log2(x)}
else if(x<0){log2(-1/x)}
}) -> f_unhandled_data[,'test'])
View(f_unhandled_data)
system.time(f_unhandled_data$Fold_Change %>% sapply(X = ,FUN = function(x){
if(x>=0){log2(x)}
else if(x<0){log2(-1/x)}
}) -> f_unhandled_data[,'log2(Fold_Change)'])
View(f_unhandled_data)
colnames(f_unhandled_data)[-1]
colnames(f_unhandled_data)[15] <- NULL
f_unhandled_data[,15] <- NULL
f_unhandled_data[,16] <- NULL
f_unhandled_data[,17] <- NULL
View(f_unhandled_data)
colnames(f_unhandled_data)
f_unhandled_data[15:16] <- NULL
View(f_unhandled_data)
system.time(f_unhandled_data$Fold_Change %>% sapply(X = ,FUN = function(x){
if(x>=0){log2(x)}
else if(x<0){log2(-1/x)}
}) -> f_unhandled_data[,'log2(Fold_Change)'])
system.time(f_unhandled_data$Fold_Change %>% sapply(X = ,FUN = function(x){
if(x>=0){log2(x)}
else if(x<0){log2(-1/x)}
}) -> f_unhandled_data[,'log2(Fold_Change)'])
source('E:/duolin_work_dictionary/About_workflows/edit_object_R_code/edit_R_object.R', encoding = 'UTF-8')
rm(a1)
rm(f_reconstruct)
rm(f_unname_data)
rm(aaa)
rm(chip2name)
rm(aaaa)
library("git2r", lib.loc="G:/R-3.5.1/library")
install.packages("git2r")
rm(bb)
rm(God)
rm(RNA)
rm(test)
rm(box_plot)
rm(c_extract_samplename)
rm(i)
rm(j)
rm(pathofdownload)
rm(f_name_data)
source('E:/duolin_work_dictionary/About_workflows/edit_object_R_code/edit_R_object.R', encoding = 'UTF-8')
source('E:/duolin_work_dictionary/About_workflows/edit_object_R_code/edit_R_object.R', encoding = 'UTF-8')
f_name_data
View(f_name_data)
rm(bb)
rm(God)
rm(RNA)
rm(test)
rm(box_plot)
rm(c_extract_samplename)
rm(i)
rm(j)
rm(pathofdownload)
source('E:/duolin_work_dictionary/About_workflows/edit_object_R_code/edit_R_object.R', encoding = 'UTF-8')
test <- God$new(f_unhandled_data = InG_vs_WT_infilter,f_name_data = f_name_data,c_species = 'human')
View(f_unhandled_data)
rm(f_unhandled_data)
test <- God$new(f_unhandled_data = InG_vs_WT_infilter,f_name_data = f_name_data,c_species = 'human')
ls()
View(test$f_handled_data)
test$f_name_data
View(test$f_name_data)
View(test$f_name_data)
test$draw_box_plot(,pathofdownload = '.')
dir()
getwd()
ggsave(filename = c('a.svg',b.pdf))
ggsave(filename = c('a.svg','b.pdf'))
ggsave(filename = c('a'),device = c('svg','pdf'))
test$box_plot
test$draw_box_plot(,pathofdownload = NA)
source('E:/duolin_work_dictionary/About_workflows/edit_object_R_code/edit_R_object.R', encoding = 'UTF-8')
test <- God$new(f_unhandled_data = InG_vs_WT_infilter,f_name_data = f_name_data,c_species = 'human')
test$draw_box_plot(,pathofdownload = NA)
head(test$d_handled_box_plot)
View(test$d_handled_box_plot)
install.packages("ggThemeAssist")
library(ggThemeAssist)
?ggThemeAssist
ggThemeAssistGadget(test$box_plot)
test$box_plot
gg <- ggplot(mtcars, aes(x = hp, y = mpg, colour = as.factor(cyl))) + geom_point()
ggThemeAssistGadget(gg)
ggThemeAssistGadget(test$box_plot)
ggThemeAssist:::ggThemeAssistAddin()
ggThemeAssist:::ggThemeAssistAddin()
a <- test$box_plot
ggThemeAssistGadget(a)
ggThemeAssistGadget(test$box_plot)
ggThemeAssistGadget('test$box_plot')
ggThemeAssistGadget(a)
a + theme(panel.grid.major = element_line(colour = "gray95",
linetype = "dotted"))
class(test$box_plot)
class(a)
source('E:/duolin_work_dictionary/About_workflows/edit_object_R_code/edit_R_object.R', encoding = 'UTF-8')
rm(a)
rm(gg)
test <- God$new(f_unhandled_data = InG_vs_WT_infilter,f_name_data = f_name_data,c_species = 'human')
test$draw_box_plot(,pathofdownload = '.')
View(test$f_handled_box_plot)
dir()
file.remove('box_plot.svg')
dir()
View(test$f_handled_data)
View(f_name_data)
a <- a
a <- 1
'${}abc'$a
'{1}abc'$a
